# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gitm0wRb6WgnJuUIYoqrmGeD54ROhTvI
"""

import numpy as np, pandas as pd, matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

def plot(X, y, y_pred, title): plt.scatter(X, y); plt.plot(X, y_pred, 'r'); plt.title(title); plt.legend(['Model', 'Data']); plt.show()

def linear_reg(df): X, y = df[['X']], df['Y']; model = LinearRegression().fit(X, y); plot(X, y, model.predict(X), 'Linear Regression')

def gaussian_kernel(x, X, tau): return np.exp(-np.sum((x - X)**2, axis=1) / (2 * tau**2))

def lwr(X, y, tau=0.5):
    X_aug, x_vals, y_pred = np.c_[np.ones(X.shape[0]), X], np.linspace(X.min(), X.max(), 100), []
    for x in x_vals:
        W = np.diag(gaussian_kernel([[x]], X, tau))
        theta = np.linalg.pinv(X_aug.T @ W @ X_aug) @ (X_aug.T @ W @ y)
        y_pred.append([1, x] @ theta)
    plot(X, y, y_pred, 'Locally Weighted Regression')

def poly_reg(df, deg):
    X, y = df[['X']], df['Y']; model = make_pipeline(PolynomialFeatures(deg), LinearRegression()).fit(X, y)
    plot(X, y, model.predict(X), f'Polynomial Regression (deg={deg})')

# Load data and run
linear_reg(pd.read_csv('/content/linear_regdataset - linear_regdataset.csv'))
lwr(*[pd.read_csv('/content/LWRdataset - LWRdataset.csv')[col].values.reshape(-1,1) if col=='X' else pd.read_csv('/content/LWRdataset - LWRdataset.csv')[col].values for col in ['X','Y']])
poly_reg(pd.read_csv('/content/poly_regdataset - poly_regdataset.csv'), 3)

